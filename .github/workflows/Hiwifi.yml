name: OpenWrt-21.02

on:
  repository_dispatch:
    types: HC5962
  workflow_dispatch:

env:
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: [HC5962]
    steps:
    - name: Clone Repository
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons
        wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
    - name: Clone OpenWrt
      id: co
      run: |
        REPO_URL=https://github.com/openwrt/openwrt
        REPO_TAG=v21.02.3
        git clone -b $REPO_TAG --depth 1 --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        name_tag=${REPO_TAG}
        echo ::set-output name=release_tag::$name_tag
        echo "::set-output name=date_tag::$(date +"%Y%m%d")"
    
    
    - name: Get variable
      working-directory: ./openwrt
      id: var
      run: |
        case ${{ matrix.target }} in
          HC5962)   _device=Hiwifi            ;;
          AX6000)   _device=AX6000           ;;
          *)        echo "wrong devices"      ;;
        esac
        echo "device=$_device" >> $GITHUB_OUTPUT
    
    - name: Feeds update
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a


    - name: Customize Packages
      working-directory: ./openwrt
      run: |
        cp ../scripts/${{ steps.var.outputs.device }}_customization.sh .
        /bin/bash ${{ steps.var.outputs.device }}_customization.sh
        cp ../scripts/00_customize_packages.sh .
        /bin/bash 00_customize_packages.sh
    - name: Convert Translation
      working-directory: ./openwrt
      run: |
        cp ../scripts/01_convert_translation.sh .
        /bin/bash 01_convert_translation.sh
    - name: Add ACL
      working-directory: ./openwrt
      run: |
        cp ../scripts/02_create_acl_for_luci.sh .
        /bin/bash 02_create_acl_for_luci.sh -a

    - name: Make Config
      working-directory: ./openwrt
      run: |
        cp ../config/${{ steps.var.outputs.device }}_defconfig .config
        make defconfig
        chmod +x ../diy-part2.sh
        /bin/bash ../diy-part2.sh
        cp -Rf ../diy/* ./
    - name: Make Download
      working-directory: ./openwrt
      run: |
        make download -j`nproc`
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
        
    - name: Get architecture
      id: device
      working-directory: ./openwrt
      run: |
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        echo "::set-output name=device::$(cat DEVICE_NAME)"
        
    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
        #是否一并缓存.ccache目录，如果你启用了ccache。这是唯一的常用参数，其他三个用于除错，一般不需要调整
        ccache: false

        #是否缓存工具链目录
        toolchain: true

        #是否跳过工具链编译
        skip: true

        #清空缓存
        clean: false
        
        mixkey: ${{ steps.device.outputs.device }}
        prefix: ${{ github.workspace }}/openwrt
        
        
    - name: Compile OpenWrt
      working-directory: ./openwrt
      run: |
        make -j`nproc` || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"    
    

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}


    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 10
        keep_minimum_runs: 1
